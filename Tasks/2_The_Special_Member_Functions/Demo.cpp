#include <iostream>

std::string f();

void f(std::string&);

int main()
{
    return 0;
}

/*
//Introduction:

class Widget {
    //Functions generated by compiler:
    Widget(int i = 42); // Default constructor

    Widget(Widget const&); //Copy constructor

    Widget& operator=(Widget const&); //Copy assignment operator

    ~Widget(); //Destructor

    Widget(Widget&&); //Move constructor

    Widget& operator=(Widget&&); //Move assignment operator
};
*/

/*
//Default constructor
class Widget {
public:
    Widget() = default;

    explicit Widget(int j) // C.46: By default, make single argumetn constructors explicit
        : i { j }
    {
    }

    int i { 42 }; // Fundamental data type
    std::string s { "C++ Essentials" }; // In-class initializer / Default member initializer
    int* pi { nullptr }; //Fundamental data type the same: int* pi =  nullptr ;
};

void printWidgetg(const Widget& w)
{
    std::cout << "\n w.i=" << w.i << ", w.s=" << w.s << ", w.pi=" << w.pi << "\n\n";
}

void g(std::string){}

int main()
{
    Widget w1 {};
    Widget w2 {};

    printWidgetg(w1);
    // printWidgetg(5);
    printWidgetg(Widget(3.14));
    // printWidgetg(Widget{3.14})); //narrowing conversion not allowed


    g("C++ Essentials"); // char[15]
    return 0;
}
*/

/*
int f(int)
{
}

int f(double) = delete;

//in modern c++ we use move instead of copy.... 
template <typename T>
void swap(T& a, T& b)
{
    T tmp { a }; //Copy constructor
    a = b; // copy assignment
    b = tmp; // copy assignment
}

int main()
{
    const int i { 5 }; // west const
    int const ii { 5 }; // east const (default)

    // f(3.14);
    // int * const // const pointer

    return 0;
}

*/
